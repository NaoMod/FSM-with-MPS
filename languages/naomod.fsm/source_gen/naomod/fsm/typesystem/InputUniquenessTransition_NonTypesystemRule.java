package naomod.fsm.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class InputUniquenessTransition_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public InputUniquenessTransition_NonTypesystemRule() {
  }
  public void applyRule(final SNode transition, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    final Wrappers._boolean isInputUnique = new Wrappers._boolean(true);
    ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.as(SNodeOperations.getParent(transition), CONCEPTS.State$3I), LINKS.outgoingTransitions$AIHp)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        if (!(Objects.equals(it, transition)) && Objects.equals(SPropertyOperations.getString(it, PROPS.input$zU4O), SPropertyOperations.getString(transition, PROPS.input$zU4O))) {
          isInputUnique.value = false;
        }
      }
    });

    if (!(isInputUnique.value)) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(transition, "An outgoing transition with this input already exists for that state", "r:6c973b08-1ea6-4b91-8f9e-dbebef3cc770(naomod.fsm.typesystem)", "5179442286348781570", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Transition$kc;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept State$3I = MetaAdapterFactory.getConcept(0xc3333435bd7f4f7cL, 0x9eabb88e0228cd0eL, 0x759dea86103a0b99L, "naomod.fsm.structure.State");
    /*package*/ static final SConcept Transition$kc = MetaAdapterFactory.getConcept(0xc3333435bd7f4f7cL, 0x9eabb88e0228cd0eL, 0x759dea86103a0ba6L, "naomod.fsm.structure.Transition");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink outgoingTransitions$AIHp = MetaAdapterFactory.getContainmentLink(0xc3333435bd7f4f7cL, 0x9eabb88e0228cd0eL, 0x759dea86103a0b99L, 0x759dea86103a0bcbL, "outgoingTransitions");
  }

  private static final class PROPS {
    /*package*/ static final SProperty input$zU4O = MetaAdapterFactory.getProperty(0xc3333435bd7f4f7cL, 0x9eabb88e0228cd0eL, 0x759dea86103a0ba6L, 0x759dea86103a0ba7L, "input");
  }
}
