package naomod.fsm.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import naomod.fsm.behavior.FSMContext;
import naomod.fsm.behavior.FSMInterpreter;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;

public final class Interpreter_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public Interpreter_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:e660b1ef-0ec1-4d6f-a8f0-b4ebf2f4fb77(naomod.fsm.intentions)", "8475187935300280724"));
  }

  @Override
  public String getPresentation() {
    return "Interpreter";
  }

  @Override
  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }

    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Run the Interpreter";
    }

    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      FSMContext context = new FSMContext(node);
      FSMInterpreter interpreter = new FSMInterpreter(context);
      interpreter.launchUI();
    }

    @Override
    public boolean isApplicable(final SNode node, final EditorContext editorContext) {
      return true;
    }



    @Override
    public IntentionDescriptor getDescriptor() {
      return Interpreter_Intention.this;
    }

  }
}
