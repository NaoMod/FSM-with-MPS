package naomod.fsm.behavior;

/*Generated by MPS */

import javax.swing.SwingUtilities;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.Objects;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public class FSMInterpreter {

  private FSMContext context;

  public FSMInterpreter(FSMContext context) {
    this.context = context;
  }
  public void launchUI() {
    SwingUtilities.invokeLater(new UI(this, SPropertyOperations.getString(SNodeOperations.as(SNodeOperations.getContainingRoot(context.getCurrentState()), CONCEPTS.FSM$3f), PROPS.name$MnvL)));
  }

  public StepResult computeStep(String input) {
    StepResult result = State__BehaviorDescriptor.computeStep_id4jTNCyx5uNU.invoke(context.getCurrentState(), input);
    if (result.isPossible()) {
      context.setCurrentState(result.getCurrentState());
    }
    return result;
  }

  public boolean checkFinalState() {
    final Wrappers._boolean isFinal = new Wrappers._boolean(false);

    SNodeOperations.getModel(context.getCurrentState()).getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.as(SNodeOperations.getParent(context.getCurrentState()), CONCEPTS.FSM$3f), LINKS.finalStates$BaBL)).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            if (Objects.equals(SLinkOperations.getTarget(it, LINKS.state$Bb$k), context.getCurrentState())) {
              isFinal.value = true;
            }
          }
        });
      }
    });

    return isFinal.value;
  }

  public String getInitalStateName() {
    final Wrappers._T<String> initialStateName = new Wrappers._T<String>();
    SNodeOperations.getModel(context.getCurrentState()).getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        initialStateName.value = SPropertyOperations.getString(context.getCurrentState(), PROPS.name$MnvL);
      }
    });
    return initialStateName.value;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept FSM$3f = MetaAdapterFactory.getConcept(0xc3333435bd7f4f7cL, 0x9eabb88e0228cd0eL, 0x759dea86103a0b98L, "naomod.fsm.structure.FSM");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink finalStates$BaBL = MetaAdapterFactory.getContainmentLink(0xc3333435bd7f4f7cL, 0x9eabb88e0228cd0eL, 0x759dea86103a0b98L, 0x759dea86103a0beeL, "finalStates");
    /*package*/ static final SReferenceLink state$Bb$k = MetaAdapterFactory.getReferenceLink(0xc3333435bd7f4f7cL, 0x9eabb88e0228cd0eL, 0x759dea86103a0be9L, 0x759dea86103a0beaL, "state");
  }
}
