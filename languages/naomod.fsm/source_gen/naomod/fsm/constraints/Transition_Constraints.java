package naomod.fsm.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class Transition_Constraints extends BaseConstraintsDescriptor {
  public Transition_Constraints() {
    super(CONCEPTS.Transition$kc);
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.target$$6wD, this, false, true) {
      @Override
      public boolean validate(final SNode referenceNode, final SNode oldReferentNode, final SNode newReferentNode) {
        return true;
      }
      @Override
      public void onReferenceSet(final SNode referenceNode, final SNode oldReferentNode, final SNode newReferentNode) {
        // automatically set the 'incomingTransition' reference
        ListSequence.fromList(SLinkOperations.getChildren(oldReferentNode, LINKS.incomingTransitions$AQUW)).removeWhere(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return Objects.equals(SLinkOperations.getTarget(it, LINKS.transition$AWMO), referenceNode);
          }
        });

        SNode newRef = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xc3333435bd7f4f7cL, 0x9eabb88e0228cd0eL, 0x759dea86103a0bd6L, "naomod.fsm.structure.TransitionReference"));
        SLinkOperations.setTarget(newRef, LINKS.transition$AWMO, referenceNode);
        ListSequence.fromList(SLinkOperations.getChildren(newReferentNode, LINKS.incomingTransitions$AQUW)).addElement(newRef);

        SLinkOperations.setTarget(referenceNode, LINKS.target$$6wD, newReferentNode);
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    return references;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Transition$kc = MetaAdapterFactory.getConcept(0xc3333435bd7f4f7cL, 0x9eabb88e0228cd0eL, 0x759dea86103a0ba6L, "naomod.fsm.structure.Transition");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink target$$6wD = MetaAdapterFactory.getReferenceLink(0xc3333435bd7f4f7cL, 0x9eabb88e0228cd0eL, 0x759dea86103a0ba6L, 0x759dea86103a0bb2L, "target");
    /*package*/ static final SContainmentLink incomingTransitions$AQUW = MetaAdapterFactory.getContainmentLink(0xc3333435bd7f4f7cL, 0x9eabb88e0228cd0eL, 0x759dea86103a0b99L, 0x759dea86103a0bd9L, "incomingTransitions");
    /*package*/ static final SReferenceLink transition$AWMO = MetaAdapterFactory.getReferenceLink(0xc3333435bd7f4f7cL, 0x9eabb88e0228cd0eL, 0x759dea86103a0bd6L, 0x759dea86103a0bd7L, "transition");
  }
}
